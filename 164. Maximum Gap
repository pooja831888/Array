class Solution {
    public int maximumGap(int[] nums) {


      //  by using bucket sort.
        if(nums.length<2)
        {
            return 0;
        }

        int n=nums.length;
        int minVal=Arrays.stream(nums).min().getAsInt();
        int maxVal=Arrays.stream(nums).max().getAsInt();

        if(maxVal==minVal)
        {
            return 0;
        }

        int bucketSize=Math.max(1,(maxVal-minVal)/(n-1));
        int bucketCount=(maxVal-minVal)/bucketSize+1;

        int[] bucketMin = new int[bucketCount];
        int[] bucketMax = new int[bucketCount];
        Arrays.fill(bucketMin, Integer.MAX_VALUE);
        Arrays.fill(bucketMax, Integer.MIN_VALUE);

        for (int num : nums) {
        int bucketIndex = (num - minVal) / bucketSize;
        bucketMin[bucketIndex] = Math.min(bucketMin[bucketIndex], num);
        bucketMax[bucketIndex] = Math.max(bucketMax[bucketIndex], num);
         }

         //calculate maximum gap

         int maxGap = 0;
          int previousMax = minVal;

         for (int i = 0; i < bucketCount; i++) {
         if (bucketMin[i] == Integer.MAX_VALUE) {
           continue; // Skip empty buckets
          }
          maxGap = Math.max(maxGap, bucketMin[i] - previousMax);
          previousMax = bucketMax[i];
        }



     return maxGap;
        
    }
}
